{"version":3,"sources":["helpers/formatDate.js","components/Head/Head.js","components/Head/CurrentWeather.js","api/api.js","helpers/daysFilter.js","lib/mobx/weatherStore.js","lib/storeContext.js","lib/mobx/rootStore.js","hooks/useStore.js","hooks/useGetWeather.js","helpers/fetchify.js","components/HeadList.js","components/Forecast/index.js","components/elements/input.js","components/elements/radio.js","forms/FilterWeather.js","app.js","lib/react-query/query-client.js","index.js"],"names":["formatDate","date","formatType","setDefaultOptions","locale","ru","formattedDate","toDate","format","Date","Head","id","type","day","className","CurrentWeather","temperature","rain_probability","humidity","api","Object","freeze","async","data","axios","get","daysFilter","filtrationProp","arr","filteredDays","typeRadio","filter","minTemp","maxTemp","WeatherStore","constructor","isFiltered","dayId","activeBox","makeAutoObservable","this","rootStore","autoBind","filtrationProperties","setFiltrationProperties","props","resetFilter","setType","activeCheckbox","setActiveCheckbox","setMinTemperature","temp","minTemperature","setMaxTemperature","maxTemperature","isFormBlocked","selectedDayId","setSelectedDayId","selectedType","weatherStore","Context","createContext","StoreProvider","Provider","value","children","useStore","useContext","useGetWeather","query","useQuery","getWeather","isFetched","isSuccess","useEffect","Array","isArray","length","slice","getData","fetchify","content","HeadList","observer","filterDays","setFilterDays","useState","showDay","renderJSX","map","days","Fragment","runInAction","Forecast","renderDays","dayClassname","cx","selected","selectedDay","onClick","Input","register","label","Radio","activeClassName","FilterWeather","activeCheckBox","handleSubmit","watch","formState","reset","useForm","defaultValues","valueRadio","onSubmit","disabled","_","isEqual","App","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","configure","enforceActions","computedRequiresReaction","observableRequiresReaction","reactionRequiresObservable","render","client","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.1123bba3.chunk.js","sourcesContent":["import { format, toDate, setDefaultOptions } from 'date-fns';\nimport { ru } from 'date-fns/locale';\n\n\nexport const formatDate = (date, formatType) => {\n    if (!date) {\n        return null;\n    }\n    setDefaultOptions({ locale: ru });\n    const formattedDate = toDate(date);\n    const dayName = format(new Date(formattedDate), formatType);\n\n    return dayName;\n};\n","import { format, toDate, setDefaultOptions } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport { formatDate } from '../../helpers/formatDate';\n\nexport const Head = ({\n    id, type, day,\n}) => {\n    return (\n        <div className = 'head' key = { id }>\n            <div className = { `icon ${type}` }></div>\n            <div className = 'current-date'>\n                <p>{ formatDate(day, 'EEEE') }</p>\n                <span>{ ` ${formatDate(day, 'e')} ${formatDate(day, 'MMMM')} ` }</span>\n            </div>\n        </div>\n\n    );\n};\n","export const CurrentWeather = ({\n    temperature, rain_probability, humidity, id,\n}) => {\n    return (\n        <div className = 'current-weather' key = { id } >\n            <p className = 'temperature'>{ temperature }</p>\n            <p className = 'meta'>\n                <span className = 'rainy'>% { rain_probability }</span>\n                <span className = 'humidity'>%{ humidity }</span>\n            </p>\n        </div>\n    );\n};\n","// Core\nimport axios from 'axios';\n\n// Instruments\nconst WEATHER_API_URL = process.env.REACT_APP_WEATHER_API_URL;\n\n\nconst api = Object.freeze({\n    async getWeather() {\n        const { data } =  await axios.get(`${WEATHER_API_URL}/forecast`);\n\n        return data.data;\n    },\n});\n\nexport { api };\n","export const daysFilter = (filtrationProp, arr) => {\n    let filteredDays = [...arr];\n    if (filtrationProp?.typeRadio) {\n        filteredDays = [...filteredDays.filter((day) => day.type === filtrationProp.typeRadio)];\n    }\n    if (filtrationProp?.minTemp) {\n        filteredDays = [...filteredDays.filter((day) => day.temperature >= filtrationProp.minTemp)];\n    }\n    if (filtrationProp?.maxTemp) {\n        filteredDays = [...filteredDays.filter((day) => day.temperature <= filtrationProp.maxTemp)];\n    }\n\n    return filteredDays;\n};\n","import {  computed, makeAutoObservable } from 'mobx';\n\nexport class WeatherStore {\n    isFiltered = false;\n    dayId = '';\n    activeBox = '';\n    filtrationProp = null;\n\n    constructor() {\n        makeAutoObservable(\n            this,\n            { rootStore: false },\n            {\n                autoBind: true,\n            },\n        );\n    }\n\n    get filtrationProperties() {\n        return this.filtrationProp;\n    }\n\n    setFiltrationProperties(props) {\n        this.filtrationProp = props;\n    }\n\n    resetFilter() {\n        this.filtrationProp = null;\n    }\n\n\n    setType(type) {\n        this.type = type;\n    }\n\n    get activeCheckbox() {\n        return this.activeBox;\n    }\n\n    setActiveCheckbox(type) {\n        this.activeBox = type;\n    }\n\n    setMinTemperature(temp) {\n        this.minTemperature = temp;\n    }\n\n    setMaxTemperature(temp) {\n        this.maxTemperature = temp;\n    }\n\n\n    get isFormBlocked() {\n        return (\n            this.type === ''\n            && this.minTemperature === ''\n            && this.maxTemperature === ''\n        );\n    }\n\n    get selectedDayId() {\n        return this.dayId;\n    }\n\n    setSelectedDayId(day) {\n        this.dayId = day;\n    }\n\n    get selectedType() {\n        return this.type;\n    }\n}\n\nexport const store = new WeatherStore();\n","// Core\nimport { createContext } from 'react';\nimport { RootStore } from './mobx/rootStore';\n\n// Store\nconst rootStore = new RootStore();\n\nexport const Context = createContext(rootStore);\n\nexport const StoreProvider = (props) => {\n    return (\n        <Context.Provider value = { rootStore }>\n            { props.children }\n        </Context.Provider>\n    );\n};\n","import { makeAutoObservable } from 'mobx';\nimport { WeatherStore } from './weatherStore';\n\nexport class RootStore {\n    weatherStore = null;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.weatherStore = new WeatherStore(this);\n    }\n}\n","import { useContext } from 'react';\nimport { Context } from '../lib/storeContext';\n\nexport const useStore = () => {\n    const store = useContext(Context);\n\n    return store;\n};\n","import { useEffect } from 'react';\nimport { useQuery } from 'react-query';\nimport { api } from '../api/api';\nimport { daysFilter } from '../helpers/daysFilter';\nimport { useStore } from './useStore';\n\nexport const useGetWeather = () => {\n    const query = useQuery('weather', api.getWeather);\n    const { data, isFetched, isSuccess } = query;\n    const { weatherStore } = useStore();\n\n\n    const getData = () => {\n        if (isSuccess && Array.isArray(data)) {\n            if (weatherStore.filtrationProperties) {\n                return [...daysFilter(weatherStore.filtrationProperties, data)].slice(0, 7);\n            }\n\n            return data.slice(0, 7);\n        }\n    };\n\n    useEffect(() => {\n        if (Array.isArray(data) && data?.length) {\n            weatherStore.setSelectedDayId(data[ 0 ]?.id);\n        }\n    }, [data]);\n\n\n    return {\n        data: Array.isArray(data) ? getData()  : [],\n        isFetched,\n    };\n};\n","export const fetchify = (isFetched, content) => {\n    if (!isFetched) {\n        return 'Загрузка...';\n    }\n\n    if (content) {\n        return content;\n    }\n\n    return null;\n};\n","// Core\nimport React, { useEffect, useState } from 'react';\n\n// MobX\nimport { observer } from 'mobx-react-lite';\nimport { runInAction } from 'mobx';\n// Components\nimport { Head, CurrentWeather } from './Head';\n\n// Hooks\nimport { useGetWeather } from '../hooks/useGetWeather';\nimport { useStore } from '../hooks';\n\n// helpers\nimport { fetchify } from '../helpers';\n\n\nexport const HeadList = observer(() => {\n    const { data, isFetched } = useGetWeather();\n    const { weatherStore } = useStore();\n    const [filterDays, setFilterDays] = useState(null);\n\n    const showDay = !filterDays ? weatherStore.selectedDayId : filterDays.id;\n\n    const currentDate = data.filter((day) => day.id === showDay);\n\n    const renderJSX = currentDate.map((days) => {\n        return (\n            <React.Fragment key = { days.id }>\n                <Head { ...days } />\n                <CurrentWeather  { ...days } />\n            </React.Fragment>\n        );\n    });\n\n    useEffect(() => {\n        runInAction(() => {\n            if (weatherStore.filtrationProperties) {\n                setFilterDays(data[ 0 ]);\n            }\n        });\n    }, [weatherStore.filtrationProperties]);\n\n    return (\n        <>\n            { fetchify(isFetched, renderJSX) }\n        </>\n    );\n});\n","// Hooks\nimport { format, toDate, setDefaultOptions } from 'date-fns';\nimport { ru } from 'date-fns/locale';\nimport { observer } from 'mobx-react-lite';\nimport cx from 'classnames';\nimport { useEffect } from 'react';\nimport { useGetWeather } from '../../hooks/useGetWeather';\n\n// helpers\nimport { fetchify } from '../../helpers';\nimport { useStore } from '../../hooks';\nimport { formatDate } from '../../helpers/formatDate';\n\n\nexport const Forecast = observer(() => {\n    const { data, isFetched } = useGetWeather();\n    const { weatherStore } = useStore();\n\n    const renderDays = data.map(({\n        id, type, day, temperature,\n    }) => {\n        const dayClassname = cx(`day ${type}`, {\n            selected: id === weatherStore.selectedDay,\n        });\n\n        return (\n            <div\n                className = { dayClassname } key = { id }\n                onClick = { () => weatherStore.setSelectedDayId(id) }>\n                <p>{ formatDate(day, 'EEEE') }</p>\n                <span>{ temperature }</span>\n            </div>\n        );\n    });\n\n    return (\n        <div className = 'forecast'>\n            { renderDays.length\n                ? fetchify(isFetched, renderDays)\n                : <p className = 'message'>\n                По заданным критериям нет доступных дней!\n                </p> }\n\n        </div>\n    );\n});\n","import cx from 'classnames';\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from '../../hooks';\n\nexport const Input = observer(({\n    type, value, register, label,\n}) => {\n    return (\n        <p className = 'custom-input'>\n            <label>{ label }</label>\n            <input\n                type = { type }\n                value = { value }\n                { ... register } />\n        </p>\n\n    );\n});\n","import cx from 'classnames';\nimport { useStore } from '../../hooks';\n\nexport const Radio = ({\n    type, value, register, selected, setActiveCheckbox,\n    label,\n}) => {\n    const { weatherStore } = useStore();\n\n    const activeClassName = cx('checkbox', {\n        selected,\n    });\n\n    return (\n        <label\n            className = { activeClassName }\n            onClick = { !weatherStore.filtrationProperties\n                ? () => { setActiveCheckbox(value); }\n                : null }>\n            { label }\n            <input\n                type = { type }\n                value = { value }\n                { ... register } />\n        </label>\n    );\n};\n","// Core\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport _ from 'lodash';\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from '../hooks';\n\n// other\nimport { Input } from '../components/elements/input';\nimport { Radio } from '../components/elements/radio';\n\n\nexport const FilterWeather = observer(() => {\n    const [activeCheckBox, setActiveCheckbox] = useState('');\n    const { weatherStore } = useStore();\n    const {\n        register, handleSubmit, watch, formState, reset,\n    } = useForm({\n        defaultValues: {\n            minTemp: null,\n            maxTemp: null,\n        },\n    });\n    const valueRadio = {\n        cloudy: 'cloudy',\n        sunny:  'sunny',\n    };\n\n    const onReset = () => {\n        weatherStore.resetFilter();\n        setActiveCheckbox('');\n        reset();\n    };\n\n    const onSubmit = (data) => {\n        if (data.minTemp && data.maxTemp) {\n            weatherStore.setFiltrationProperties(data);\n        }\n    };\n\n\n    return (\n        <form\n            className = 'filter'\n            onSubmit = { handleSubmit(onSubmit) }>\n\n            <Radio\n                type = 'radio'\n                label = 'Облачно'\n                setActiveCheckbox = { setActiveCheckbox }\n                selected = { activeCheckBox === valueRadio.cloudy }\n                value = { valueRadio.cloudy }\n                register = { register('typeRadio') } />\n\n            <Radio\n                type = 'radio'\n                label = 'Солнечно'\n                setActiveCheckbox = { setActiveCheckbox }\n                selected = { activeCheckBox === valueRadio.sunny }\n                value = { valueRadio.sunny }\n                register = { register('typeRadio') } />\n\n\n            <Input\n                type = 'number'\n                register = { register('minTemp') }\n                label = 'Минимальная температура' />\n\n            <Input\n                type = 'number'\n                register = { register('maxTemp') }\n                label = 'Максимальная температура' />\n\n            { !weatherStore.filtrationProperties\n                ? <button\n                    disabled = { _.isEqual(watch(), formState.defaultValues) }\n                    type = 'submit'>Отфильтровать</button>\n                : <button\n                    onClick = { onReset }>Сбросить</button>\n            }\n        </form>\n    );\n});\n","// Components\nimport { observer } from 'mobx-react-lite';\nimport {\n    Forecast, HeadList,\n} from './components';\nimport { FilterWeather } from './forms/FilterWeather';\n\n\n// Instruments\n\n\nexport const App = observer(() => {\n    return (\n        <main >\n            <FilterWeather />\n            <HeadList />\n            <Forecast />\n        </main>\n    );\n});\n\n","// Core\nimport { QueryClient } from 'react-query';\n\nexport const queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnWindowFocus: false,\n        },\n    },\n});\n","// Core\nimport { render } from 'react-dom';\nimport { QueryClientProvider } from 'react-query';\nimport { configure } from 'mobx';\n\n// Components\nimport { App } from './app';\nimport {  StoreProvider } from './lib/storeContext';\n\n// Instruments\nimport './theme/index.scss';\nimport { queryClient } from './lib/react-query';\n\nconfigure({\n    enforceActions:             'always',\n    computedRequiresReaction:   true,\n    observableRequiresReaction: true,\n    reactionRequiresObservable: true,\n});\n\nrender(\n    <QueryClientProvider client = { queryClient }>\n        <StoreProvider>\n            <App />\n        </StoreProvider>\n    </QueryClientProvider>,\n    document.getElementById('root'),\n    () => {\n        // eslint-disable-next-line no-console\n        console.log('%c Приложение успешно запущено ', 'background: #00ff00; color: #000000; padding: 2.5px;');\n    },\n);\n"],"sourceRoot":""}